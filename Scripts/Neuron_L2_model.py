import numpy as np
import matplotlib.pyplot as plt

def prob_to_bipolar(x):
    return (2*x)-1

def bipolar_to_prob(y):
    return (y+1)/2

def prob_int_to_bipolar(x):
    return prob_to_bipolar(x/256)

def signed_int_to_bi_prob(x):
    return prob_int_to_bipolar(x+128)

def signed_int_arr_to_bi_prob(x_arr):
    arr = [signed_int_to_bi_prob(x) for x in x_arr]
    return arr



test_data_digits = {
    "test_data_zero" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 115, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 123, 118, 103, 55, 0, 0, 0, 0, 0, 0, 0, 0, 57, 127, 101, 123, 52, 106, 0, 0, 0, 0, 0, 0, 0, 31, 122, 91, 11, 18, 0, 125, 27, 0, 0, 0, 0, 0, 8, 117, 47, 6, 0, 0, 0, 127, 49, 0, 0, 0, 0, 0, 65, 101, 0, 0, 0, 0, 0, 127, 43, 0, 0, 0, 0, 0, 84, 60, 0, 0, 0, 1, 66, 92, 2, 0, 0, 0, 0, 0, 85, 46, 0, 0, 14, 88, 74, 0, 0, 0, 0, 0, 0, 0, 84, 113, 65, 96, 116, 65, 7, 0, 0, 0, 0, 0, 0, 0, 32, 111, 127, 83, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
    "test_data_one" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 127, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 124, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
    "test_data_two" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 56, 64, 64, 35, 10, 2, 0, 0, 0, 0, 0, 0, 0, 85, 127, 127, 127, 127, 119, 114, 93, 7, 0, 0, 0, 0, 0, 105, 110, 79, 105, 122, 127, 127, 127, 117, 8, 0, 0, 0, 0, 0, 0, 0, 0, 13, 29, 66, 115, 127, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 107, 120, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 82, 126, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 107, 125, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 122, 111, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 121, 127, 89, 43, 41, 9, 1, 0, 0, 0, 0, 0, 0, 10, 100, 124, 127, 127, 127, 120, 88, 0, 0, 0, 0, 0, 0, 0, 0, 19, 34, 64, 47, 12, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
    "test_data_three" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 19, 64, 63, 63, 23, 0, 0, 0, 0, 0, 0, 0, 28, 109, 123, 127, 126, 126, 115, 9, 0, 0, 0, 0, 0, 0, 14, 70, 48, 33, 42, 123, 116, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 125, 83, 0, 0, 0, 0, 0, 0, 0, 4, 40, 48, 101, 126, 106, 30, 0, 0, 0, 0, 0, 0, 0, 67, 127, 127, 127, 127, 63, 0, 0, 0, 0, 0, 0, 0, 0, 4, 22, 11, 11, 83, 82, 0, 0, 0, 0, 0, 0, 0, 10, 1, 0, 0, 12, 104, 82, 0, 0, 0, 0, 0, 0, 34, 118, 39, 34, 45, 105, 118, 49, 0, 0, 0, 0, 0, 0, 32, 114, 126, 126, 116, 84, 20, 0, 0, 0, 0, 0, 0, 0, 0, 14, 61, 34, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
    "test_data_four" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 5, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 86, 10, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 27, 103, 0, 0, 0, 0, 22, 107, 0, 0, 0, 0, 0, 0, 59, 77, 0, 0, 0, 0, 41, 90, 0, 0, 0, 0, 2, 34, 120, 42, 0, 0, 0, 0, 40, 108, 54, 66, 87, 95, 93, 58, 127, 5, 0, 0, 0, 0, 0, 39, 46, 46, 20, 0, 0, 35, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
    "test_data_five" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 95, 127, 127, 103, 0, 0, 0, 0, 0, 0, 0, 0, 40, 119, 95, 71, 56, 32, 0, 0, 0, 0, 0, 0, 64, 48, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 119, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 127, 103, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 56, 119, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 103, 48, 0, 0, 0, 0, 0, 0, 0, 0, 64, 95, 64, 103, 119, 16, 0, 0, 0, 0, 0, 0, 0, 0, 111, 111, 103, 64, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
    "test_data_six" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 123, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 126, 83, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 119, 97, 7, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 120, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 121, 86, 37, 49, 29, 0, 0, 0, 0, 0, 0, 0, 0, 53, 127, 110, 118, 102, 124, 27, 0, 0, 0, 0, 0, 0, 0, 57, 127, 116, 24, 14, 127, 46, 0, 0, 0, 0, 0, 0, 0, 57, 116, 40, 1, 82, 121, 11, 0, 0, 0, 0, 0, 0, 0, 24, 124, 90, 92, 127, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 96, 98, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
    "test_data_seven" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 12, 46, 61, 73, 16, 0, 0, 0, 1, 0, 0, 0, 29, 91, 119, 82, 53, 127, 50, 0, 0, 0, 0, 0, 0, 0, 36, 60, 13, 10, 108, 91, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 108, 96, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 103, 91, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 98, 103, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 98, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
    "test_data_eight" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 42, 54, 30, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 127, 111, 108, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 116, 3, 21, 122, 68, 0, 0, 0, 0, 0, 0, 0, 0, 57, 125, 74, 120, 123, 56, 0, 0, 0, 0, 0, 0, 0, 0, 63, 127, 127, 72, 4, 0, 0, 0, 0, 0, 0, 0, 4, 58, 123, 107, 27, 0, 0, 0, 0, 0, 0, 0, 0, 6, 95, 127, 117, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 90, 31, 98, 81, 0, 0, 0, 0, 0, 0, 0, 0, 12, 122, 40, 21, 126, 54, 0, 0, 0, 0, 0, 0, 0, 0, 20, 124, 116, 123, 96, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 64, 55, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
    "test_data_nine" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 63, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 81, 110, 77, 127, 27, 0, 0, 0, 0, 0, 0, 0, 23, 113, 34, 1, 68, 101, 1, 0, 0, 0, 0, 0, 0, 0, 58, 52, 0, 17, 117, 65, 0, 0, 0, 0, 0, 0, 0, 0, 59, 118, 92, 104, 127, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 31, 75, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 110, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 104, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 69, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 118, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 30, 0, 0, 0, 0, 0, 0, 0, 0 ]
}


W_L2_1 = [ 9, -1, 4, 17, 23, 43, 30, 7, -37, 0, 33, 13, 9, -6, 2, 10, -31, 4, 1, 11, -1, 4, -23, -27, -3, 28, 25, -4, -12, -6, 27, 13, 21, -20, -19, -19, -6, 31, 21, 16, -41, -26, 11, -4, 11, 11, 4, 18, 0, -48, 28, 49, 17, 16, -29, -16, 41, -13, 8, -2, 26, 11, -18, -50, 65, 33, 8, 0, -37, -85, 35, 17, -25, -3, 11, 11, -58, -25, 47, 19, 9, 9, -36, -59, 32, -6, -16, 11, 20, -8, -52, -15, 22, -13, -15, 9, 33, -14, 17, -8, 1, 36, 13, -16, -24, -17, 4, -32, -7, 21, 11, -1, -2, -45, -1, 8, 18, -16, -26, -11, -10, -3, 7, 7, 15, 21, 28, -6, -32, 0, 26, 22, -12, -21, 7, 2, 31, 15, 3, -30, 7, 6, -3, 2, 21, 45, 1, -12, -3, 1, 16, 7, -4, 31, 4, -42, 22, 33, 26, 21, 2, -5, 1, -13, 4, -14, -43, -13, 2, -4, 35, 27, 1, -10, 8, -22, 2, -60, -42, -42, -31, -2, 9, -28, -32, 2, 8, -4, -6, -5, 7, 14, -24, 31, -20, -7 ]

B_L2 = 11


## Stochastic Neuron Functions ##
def sigmoid(x):
    # Scale value by 256
    y = x/256
    z = 1 / (1 + np.exp(-4*y))
    # Scale back to integer
    return z*256

def relu(x):
    if x > 0:
        return x
    else:
        return 0

# Accumulate
def add_stoch(inps):
    return [ (inps[i*2]+inps[(i*2)+1])/2 for i in range(int(len(inps)/2)) ]


USE_STOCH_ADD = 1
USE_SCALED_ADD = 0
USE_RELU = 1

# Stochastic Neuron L2
def Neuron_L2(inputs, weights, bias):
    """
    Inputs: float values representing stoch probs.
    Outputs: float values repr. stoch. prob.
    """
    #print("Inputs: ", [bipolar_to_prob_int(k) for k in inputs])

    # Multiply
    mul = [inputs[i]*weights[i] for i in range(len(inputs))]
    
    # Accumulate
    if USE_STOCH_ADD:
        # Sum pairs and /2
        add_1 = add_stoch(mul)          # 98
        add_2 = add_stoch(add_1)        # 49
        add_3 = add_stoch(add_2)        # 24R1, last value of add_2 needs to be added
        add_4 = add_stoch(add_3)
        add_5 = add_stoch(add_4)
        add_6 = add_stoch(add_5)
        # Stage 7 - add remainder of add_3
        add_7_1 = (add_6[0] + add_6[1])/2
        add_7_2 = (add_6[2] + add_2[48])/2
        add_7 = [add_7_1, add_7_2]          # Just for printing values
        # Last stage
        macc_out = (add_7_1 + add_7_2)/2
    
        # Add bias
        bias_out = (macc_out + (bias/256) )/2

    elif USE_SCALED_ADD:
        macc_out = sum(mul)/256
        bias_out = (macc_out + (bias/256) ) / 2
    else:
        macc_out = sum(mul)
        bias_out = macc_out + bias

    if USE_RELU:
        neur_out = relu(bias_out)
    else:
        neur_out = sigmoid(bias_out)
        
    return (macc_out, bias_out, neur_out, add_1, add_2, add_3, add_4, add_5, add_6, add_7, mul)



test_data = test_data_digits["test_data_eight"]

## Convert inputs to floats
test_data_float = signed_int_arr_to_bi_prob(test_data)

## Convert weights and biases to floats
bias_float = signed_int_to_bi_prob(B_L2)
weights_float = signed_int_arr_to_bi_prob(W_L2_1)


result = Neuron_L2(test_data_float, weights_float, bias_float)

macc_out_L2 = result[0]
bias_out_L2 = result[1]
result_L2 = result[2]

add1_res = result[3]
add2_res = result[4]
add3_res = result[5]
add4_res = result[6]
add5_res = result[7]
add6_res = result[8]
add7_res = result[9]

mul_res = result[10]


# Convert to bipolar integers to compare to Verilog TB
add1_out_bi_int8 = [int(bipolar_to_prob(x)*65536) for x in add1_res]
print(add1_out_bi_int8)








