import matplotlib.pyplot as plt
from sklearn.metrics import mean_absolute_error
import numpy as np

def bipolar_to_prob(y):
    return (y+1)/2

def bipolar_to_prob_int(y):
    return int(bipolar_to_prob(y)*256)

def bipolar_to_prob_int10(y):
    return int(bipolar_to_prob(y)*4096)

def prob_to_bipolar(x):
    return (2*x)-1

def prob_int_to_bipolar(x):
    return prob_to_bipolar(x/256)

def prob_int16_to_bipolar(x):
    return prob_to_bipolar(x/65536)

def prob_int12_to_bipolar(x):
    return prob_to_bipolar(x/4096)

def prob_int16_to_unipolar(x):
    return x/65536


BITSTR_LEN = 4095

##########  Values from regenerated output L2 - 4095 STB test #############
L2_bias_out_viv_int12 = [2045,  2021,  2019,  2034,  2036,  2012,  2043,  2030,  2028,  2014,  2022,  2023,  2037,  2029,  2042,  2016,  2048,  2022,  2016,  2035,  2034,  2042,  2015,  2025,  2017,  2019,  2020,  2029,  2043,  2026,  2025,  2008]
L2_out_viv_int16_regen = [64768, 58624, 58112, 61952, 62464, 56320, 64256, 60928, 60416, 56832, 58880, 59136, 62720, 60672, 64000, 57344,     0, 58880, 57344, 62208, 61952, 64000, 57088, 59648, 57600, 58112, 58368, 60672, 64256, 59904, 59648, 55296]
###########################################################

##########  Values from regenerated output L2 - 65535 STB test #############
L2_bias_out_viv_int16 = [32786, 32667, 32735, 32767, 32833, 32835, 32932, 32845, 32992, 32607, 32839, 32841, 32767, 32792, 32994, 32795, 32886, 32663, 32620, 32810, 32779, 32888, 32743, 32619, 32790, 32814, 32972, 32733, 32789, 32823, 32801, 32721]
L2_out_viv_int16 = [0, 39680, 57088, 65280,     0,     0, 41984,     0, 57344,     0,     0,     0, 65280,     0, 57856,     0,     0, 38656,     0,     0,     0,     0, 59136,     0,     0,     0, 52224, 56576,     0,     0,     0, 53504]
###########################################################

##########  Values from regenerated output L2 - 255 STB test #############
L2_bias_out_viv_int8 = [128,131,128,124,129,126,125,129,126,128,129,127,130,130,125,127,130,123,126,132,131,131,122,132,129,129,125,128,126,129,126,124]
L2_out_viv_int8 = [32768,33536,32768,0,33024,0,0,33024,0,32768,33024,0,33280,33280,0,0,33280,0,0,33792,33536,33536,0,33792,33024,33024,0,32768,0,33024,0,0]
###########################################################


######### Python values UNSCALED ###########
L2_bias_out_pyt_float = [0.02532958984375, -1.4052734375, -0.9422607421875, -0.11248779296875, 0.98223876953125, 1.32269287109375, 2.41656494140625, 0.86798095703125, 2.823486328125, -3.33740234375, 0.69451904296875, 0.59326171875, -0.21990966796875, 1.05084228515625, 3.30902099609375, 1.79010009765625, 0.90692138671875, -1.65625, -0.84063720703125, 1.53009033203125, 0.27227783203125, 1.44830322265625, 0.98541259765625, -2.02081298828125, 1.01702880859375, 0.5308837890625, 3.0419921875, -0.38787841796875, -0.13720703125, -0.0679931640625, 1.06414794921875, -0.26434326171875]
L2_bias_out_pyt_float_scaled = [4.947185516357422e-05, -0.0027446746826171875, -0.001840353012084961, -0.00021970272064208984, 0.0019184350967407227, 0.0025833845138549805, 0.004719853401184082, 0.0016952753067016602, 0.005514621734619141, -0.006518363952636719, 0.0013564825057983398, 0.0011587142944335938, -0.00042951107025146484, 0.0020524263381958008, 0.0064629316329956055, 0.0034962892532348633, 0.0017713308334350586, -0.00323486328125, -0.0016418695449829102, 0.002988457679748535, 0.0005317926406860352, 0.0028287172317504883, 0.0019246339797973633, -0.003946900367736816, 0.001986384391784668, 0.0010368824005126953, 0.0059413909912109375, -0.0007575750350952148, -0.00026798248291015625, -0.0001327991485595703, 0.002078413963317871, -0.0005162954330444336]
L2_out_pyt_float = [0.02532958984375, 0, 0, 0, 0.98223876953125, 1.32269287109375, 2.41656494140625, 0.86798095703125, 2.823486328125, 0, 0.69451904296875, 0.59326171875, 0, 1.05084228515625, 3.30902099609375, 1.79010009765625, 0.90692138671875, 0, 0, 1.53009033203125, 0.27227783203125, 1.44830322265625, 0.98541259765625, 0, 1.01702880859375, 0.5308837890625, 3.0419921875, 0, 0, 0, 1.06414794921875, 0]
############################################

## Convert vivado values to float
#L2_bias_out_viv_float = [prob_int16_to_bipolar(x) for x in L2_bias_out_viv_int16]
#L2_out_viv_float = [prob_int16_to_bipolar(x) for x in L2_out_viv_int16]

L2_bias_out_viv_float = [prob_int_to_bipolar(x) for x in L2_bias_out_viv_int8]
L2_out_viv_float = [prob_int_to_bipolar(x) for x in L2_out_viv_int8]


## Compare neur_out
plt.figure(1)
plt.title("L2 Neuron outputs comparison")
assert(len(L2_out_viv_float) == len(L2_out_pyt_float))
x_values = [i for i in range(len(L2_out_viv_float))]
plt.bar(x_values, L2_out_pyt_float, label="Python values")
plt.scatter(x_values, L2_out_viv_float, label="Vivado values")
plt.legend()
plt.grid()

# Compare bias_out
plt.figure(2)
plt.title("L2 Bias outputs comparison")
assert(len(L2_bias_out_viv_float) == len(L2_bias_out_pyt_float_scaled))
x_values = [i for i in range(len(L2_bias_out_pyt_float_scaled))]
plt.bar(x_values, L2_bias_out_pyt_float_scaled, label="Python values")
plt.scatter(x_values, L2_bias_out_viv_float, label="Vivado values")
plt.legend()
plt.grid()

plt.show()