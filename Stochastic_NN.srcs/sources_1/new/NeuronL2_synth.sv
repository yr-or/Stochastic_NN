

module NeuronL2_synth(
    input clk
    );

    localparam NUM_INPS = 196;

    // Generic conns
    wire reset;
    wire [3:0] digit_sel;


    logic [15:0] test_data_zero [0:195] = '{ 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 43520, 62208, 55296, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 33024, 43520, 64256, 62976, 59136, 46848, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 47360, 65280, 58624, 64256, 46080, 59904, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 40704, 64000, 56064, 35584, 37376, 32768, 64768, 39680, 32768, 32768, 32768, 32768, 32768, 34816, 62720, 44800, 34304, 32768, 32768, 32768, 65280, 45312, 32768, 32768, 32768, 32768, 32768, 49408, 58624, 32768, 32768, 32768, 32768, 32768, 65280, 43776, 32768, 32768, 32768, 32768, 32768, 54272, 48128, 32768, 32768, 32768, 33024, 49664, 56320, 33280, 32768, 32768, 32768, 32768, 32768, 54528, 44544, 32768, 32768, 36352, 55296, 51712, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 54272, 61696, 49408, 57344, 62464, 49408, 34560, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 40960, 61184, 65280, 54016, 37376, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768 };
    logic [15:0] test_data_one [0:195] = '{ 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 35072, 39168, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 50688, 50944, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 50688, 52992, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 50176, 57600, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 44544, 58880, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 44544, 62464, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 39168, 65280, 33792, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 35328, 64512, 38912, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 57856, 33024, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 61440, 36864, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 45056, 33792, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768 };
    logic [15:0] test_data_two [0:195] = '{ 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 35328, 47104, 49152, 49152, 41728, 35328, 33280, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 54528, 65280, 65280, 65280, 65280, 63232, 61952, 56576, 34560, 32768, 32768, 32768, 32768, 32768, 59648, 60928, 52992, 59648, 64000, 65280, 65280, 65280, 62720, 34816, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 36096, 40192, 49664, 62208, 65280, 43264, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 33280, 60160, 63488, 36352, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 36096, 53760, 65024, 48128, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 43776, 60160, 64768, 48640, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 50944, 64000, 61184, 42240, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 33024, 63744, 65280, 55552, 43776, 43264, 35072, 33024, 32768, 32768, 32768, 32768, 32768, 32768, 35328, 58368, 64512, 65280, 65280, 65280, 63488, 55296, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 37632, 41472, 49152, 44800, 35840, 36608, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768 };
    logic [15:0] test_data_three [0:195] = '{ 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 34048, 37632, 49152, 48896, 48896, 38656, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 39936, 60672, 64256, 65280, 65024, 65024, 62208, 35072, 32768, 32768, 32768, 32768, 32768, 32768, 36352, 50688, 45056, 41216, 43520, 64256, 62464, 34816, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 44288, 64768, 54016, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 33792, 43008, 45056, 58624, 65024, 59904, 40448, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 49920, 65280, 65280, 65280, 65280, 48896, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 33792, 38400, 35584, 35584, 54016, 53760, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 35328, 33024, 32768, 32768, 35840, 59392, 53760, 32768, 32768, 32768, 32768, 32768, 32768, 41472, 62976, 42752, 41472, 44288, 59648, 62976, 45312, 32768, 32768, 32768, 32768, 32768, 32768, 40960, 61952, 65024, 65024, 62464, 54272, 37888, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 36352, 48384, 41472, 33536, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768 };
    logic [15:0] test_data_four [0:195] = '{ 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 42752, 34048, 32768, 32768, 32768, 32768, 47104, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 54784, 35328, 32768, 32768, 32768, 32768, 58368, 32768, 32768, 32768, 32768, 32768, 32768, 39680, 59136, 32768, 32768, 32768, 32768, 38400, 60160, 32768, 32768, 32768, 32768, 32768, 32768, 47872, 52480, 32768, 32768, 32768, 32768, 43264, 55808, 32768, 32768, 32768, 32768, 33280, 41472, 63488, 43520, 32768, 32768, 32768, 32768, 43008, 60416, 46592, 49664, 55040, 57088, 56576, 47616, 65280, 34048, 32768, 32768, 32768, 32768, 32768, 42752, 44544, 44544, 37888, 32768, 32768, 41728, 61696, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 44032, 53504, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 44032, 56064, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 44032, 59904, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 35840, 46336, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768 };
    logic [15:0] test_data_five [0:195] = '{ 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 45056, 57088, 65280, 65280, 59136, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 43008, 63232, 57088, 50944, 47104, 40960, 32768, 32768, 32768, 32768, 32768, 32768, 49152, 45056, 34816, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 43008, 63232, 36864, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 45056, 65280, 59136, 47104, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 36864, 47104, 63232, 43008, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 34816, 59136, 45056, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 49152, 57088, 49152, 59136, 63232, 36864, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 61184, 61184, 59136, 49152, 36864, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768 };
    logic [15:0] test_data_six [0:195] = '{ 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 41728, 64256, 56832, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 43008, 65024, 54016, 60672, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 36608, 63232, 57600, 34560, 34048, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 54272, 63488, 37632, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 36864, 63744, 54784, 42240, 45312, 40192, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 46336, 65280, 60928, 62976, 58880, 64512, 39680, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 47360, 65280, 62464, 38912, 36352, 65280, 44544, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 47360, 62464, 43008, 33024, 53760, 63744, 35584, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 38912, 64512, 55808, 56320, 65280, 43520, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 41472, 57344, 57856, 48384, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768 };
    logic [15:0] test_data_seven [0:195] = '{ 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 35328, 32768, 32768, 32768, 32768, 32768, 35840, 44544, 48384, 51456, 36864, 32768, 32768, 32768, 33024, 32768, 32768, 32768, 40192, 56064, 63232, 53760, 46336, 65280, 45568, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 41984, 48128, 36096, 35328, 60416, 56064, 33536, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 35328, 60416, 57344, 34048, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 35072, 59136, 56064, 34048, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 33792, 57856, 59136, 34048, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 50688, 57856, 34816, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 43008, 38656, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768 };
    logic [15:0] test_data_eight [0:195] = '{ 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 34048, 43520, 46592, 40448, 33280, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 44544, 65280, 61184, 60416, 57600, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 47360, 62464, 33536, 38144, 64000, 50176, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 47360, 64768, 51712, 63488, 64256, 47104, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 48896, 65280, 65280, 51200, 33792, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 33792, 47616, 64256, 60160, 39680, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 34304, 57088, 65280, 62720, 53504, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 50688, 55808, 40704, 57856, 53504, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 35840, 64000, 43008, 38144, 65024, 46592, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 37888, 64512, 62464, 64256, 57344, 33280, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 41728, 49152, 46848, 34816, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768 };
    logic [15:0] test_data_nine [0:195] = '{ 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 39168, 48896, 42496, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 37888, 53504, 60928, 52480, 65280, 39680, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 38656, 61696, 41472, 33024, 50176, 58624, 33024, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 47616, 46080, 32768, 37120, 62720, 49408, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 47872, 62976, 56320, 59392, 65280, 37120, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 39168, 40704, 51968, 52736, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 37120, 60928, 35072, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 35072, 59392, 46080, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 51712, 50432, 33024, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 40448, 62976, 34304, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 37888, 40448, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768 };
    logic [15:0] input_data_bin [0:195];

    // Weights
    reg [15:0] W_ARRAY_L2_N0 [0:NUM_INPS-1] = '{ 35072, 32512, 33792, 37120, 38656, 43776, 40448, 34560, 23296, 32768, 41216, 36096, 35072, 31232, 33280, 35328, 24832, 33792, 33024, 35584, 32512, 33792, 26880, 25856, 32000, 39936, 39168, 31744, 29696, 31232, 39680, 36096, 38144, 27648, 27904, 27904, 31232, 40704, 38144, 36864, 22272, 26112, 35584, 31744, 35584, 35584, 33792, 37376, 32768, 20480, 39936, 45312, 37120, 36864, 25344, 28672, 43264, 29440, 34816, 32256, 39424, 35584, 28160, 19968, 49408, 41216, 34816, 32768, 23296, 11008, 41728, 37120, 26368, 32000, 35584, 35584, 17920, 26368, 44800, 37632, 35072, 35072, 23552, 17664, 40960, 31232, 28672, 35584, 37888, 30720, 19456, 28928, 38400, 29440, 28928, 35072, 41216, 29184, 37120, 30720, 33024, 41984, 36096, 28672, 26624, 28416, 33792, 24576, 30976, 38144, 35584, 32512, 32256, 21248, 32512, 34816, 37376, 28672, 26112, 29952, 30208, 32000, 34560, 34560, 36608, 38144, 39936, 31232, 24576, 32768, 39424, 38400, 29696, 27392, 34560, 33280, 40704, 36608, 33536, 25088, 34560, 34304, 32000, 33280, 38144, 44288, 33024, 29696, 32000, 33024, 36864, 34560, 31744, 40704, 33792, 22016, 38400, 41216, 39424, 38144, 33280, 31488, 33024, 29440, 33792, 29184, 21760, 29440, 33280, 31744, 41728, 39680, 33024, 30208, 34816, 27136, 33280, 17408, 22016, 22016, 24832, 32256, 35072, 25600, 24576, 33280, 34816, 31744, 31232, 31488, 34560, 36352, 26624, 40704, 27648, 30976 };

    // Bias
    reg [15:0] B_L2_N0 = 15'd32768;

    // Combinational block to select digit
    always @(*) begin
        case (digit_sel)
            4'h0    :   input_data_bin = test_data_zero;
            4'h1    :   input_data_bin = test_data_one;
            4'h2    :   input_data_bin = test_data_two;
            4'h3    :   input_data_bin = test_data_three;
            4'h4    :   input_data_bin = test_data_four;
            4'h5    :   input_data_bin = test_data_five;
            4'h6    :   input_data_bin = test_data_six ;
            4'h7    :   input_data_bin = test_data_seven;
            4'h8    :   input_data_bin = test_data_eight;
            4'h9    :   input_data_bin = test_data_nine;
            default :   input_data_bin = test_data_zero;
        endcase
    end

    // Inputs to SNGs
    reg [15:0] LFSR_inps_seed = 16'd25645;
    reg [15:0] LFSR_wghts_seed = 16'd57842;
    reg [15:0] LFSR_bias_seed = 16'd37483;

    // SNGs -> Neuron
    wire input_data_stoch [0:NUM_INPS-1];
    wire weights_stoch [0:NUM_INPS-1];
    wire bias_stoch;

    // Neuron -> STBs
    wire macc_out_stoch;
    wire bias_out_stoch;
    // debug
    wire mul_res_stoch  [0:195];
    wire add1_res_stoch [0:97];
    wire add2_res_stoch [0:48];
    wire add3_res_stoch [0:23];
    wire add4_res_stoch [0:11];
    wire add5_res_stoch [0:5];
    wire add6_res_stoch [0:2];
    wire add7_res_stoch [0:1];

    // STB outputs
    wire [15:0] macc_out_bin;
    wire [15:0] bias_out_bin;
    wire done;
    // debug wires
    wire [15:0] mul_res_bin  [0:195];
    wire [15:0] add1_res_bin [0:97];
    wire [15:0] add2_res_bin [0:48];
    wire [15:0] add3_res_bin [0:23];
    wire [15:0] add4_res_bin [0:11];
    wire [15:0] add5_res_bin [0:5];
    wire [15:0] add6_res_bin [0:2];
    wire [15:0] add7_res_bin [0:1];



    ///////////////////// SNGs /////////////////////////////
    // SNGs for inputs
    genvar i;
    generate
        for (i=0; i<NUM_INPS; i=i+1) begin
            StochNumGen16 SNG_inps(
                .clk                    (clk),
                .reset                  (reset),
                .seed                   (LFSR_inps_seed),
                .prob                   (input_data_bin[i]),
                .stoch_num              (input_data_stoch[i])
            );
        end
    endgenerate

    // SNGs for weights
    generate
        for (i=0; i<NUM_INPS; i=i+1) begin
            StochNumGen16 SNG_wghts(
                .clk                    (clk),
                .reset                  (reset),
                .seed                   (LFSR_wghts_seed),
                .prob                   (W_ARRAY_L2_N0[i]),
                .stoch_num              (weights_stoch[i])
            );
        end
    endgenerate

    // SNG for bias
    StochNumGen16 SNG_bias(
        .clk                    (clk),
        .reset                  (reset),
        .seed                   (LFSR_bias_seed),
        .prob                   (B_L2_N0),
        .stoch_num              (bias_stoch)
    );
    ///////////////////////////////////////////////////////////

    /////////////// SNGs for adder select lines //////////////////
    // Wire array for adder stages and bias, i.e. add1, add2, ... add8, add_bias
    wire add_sel_stoch [0:8];
    reg [15:0] adder_seeds [0:8] = '{49449, 65515, 49141, 34104, 65172, 23739, 62006, 39009, 47385};

    generate
        for (i=0; i<9; i=i+1) begin
            StochNumGen16 SNG_add_sel(
                .clk                (clk),
                .reset              (reset),
                .seed               (adder_seeds[i]),
                .prob               (16'h8000),     // 0.5
                .stoch_num          (add_sel_stoch[i])
            );
        end
    endgenerate
    //////////////////////////////////////////////////////////////


    // Neuron_L2
    Neuron196_L2 neuron(
        .clk                    (clk),
        .reset                  (reset),
        .input_data             (input_data_stoch),
        .weights                (weights_stoch),
        .bias                   (bias_stoch),
        .add_sel                (add_sel_stoch),

        // debug
        .macc_out               (macc_out_stoch),
        .mul_res_stoch          (mul_res_stoch),
        .add1_res_stoch         (add1_res_stoch),
        .add2_res_stoch         (add2_res_stoch),
        .add3_res_stoch         (add3_res_stoch),
        .add4_res_stoch         (add4_res_stoch),
        .add5_res_stoch         (add5_res_stoch),
        .add6_res_stoch         (add6_res_stoch),
        .add7_res_stoch         (add7_res_stoch),
        .bias_out               (bias_out_stoch)
    );



    // STBs
    StochToBin16 STB_macc (
        .clk                    (clk),
        .reset                  (reset),
        .enable                 (1'b1),
        .bit_stream             (macc_out_stoch),
        .bin_number             (macc_out_bin),
        .done                   (done)
    );
    StochToBin16 STB_bias (
        .clk                    (clk),
        .reset                  (reset),
        .enable                 (1'b1),
        .bit_stream             (bias_out_stoch),
        .bin_number             (bias_out_bin)
    );

    // STB for mul results
    generate
        for (i=0; i<196; i=i+1) begin
            StochToBin16 stb_mul(
                .clk                (clk),
                .reset              (reset),
                .enable             (1'b1),
                .bit_stream         (mul_res_stoch[i]),
                .bin_number         (mul_res_bin[i])
            );
        end
    endgenerate

    //////// STBs for adder stages result /////////
    // Consts
    localparam NUM_ADDS_1 = 98;
    localparam NUM_ADDS_2 = 49;
    localparam NUM_ADDS_3 = 24;
    localparam NUM_ADDS_4 = 12;
    localparam NUM_ADDS_5 = 6;
    localparam NUM_ADDS_6 = 3;
    localparam NUM_ADDS_7 = 2;
    generate
        for (i=0; i<NUM_ADDS_1; i=i+1) begin
            StochToBin16 stb_add1(
                .clk                (clk),
                .reset              (reset),
                .enable             (1'b1),
                .bit_stream         (add1_res_stoch[i]),
                .bin_number         (add1_res_bin[i])
            );
        end
    endgenerate
    generate
        for (i=0; i<NUM_ADDS_2; i=i+1) begin
            StochToBin16 stb_add2(
                .clk                (clk),
                .reset              (reset),
                .enable             (1'b1),
                .bit_stream         (add2_res_stoch[i]),
                .bin_number         (add2_res_bin[i])
            );
        end
    endgenerate
    generate
        for (i=0; i<NUM_ADDS_3; i=i+1) begin
            StochToBin16 stb_add3(
                .clk                (clk),
                .reset              (reset),
                .enable             (1'b1),
                .bit_stream         (add3_res_stoch[i]),
                .bin_number         (add3_res_bin[i])
            );
        end
    endgenerate
    generate
        for (i=0; i<NUM_ADDS_4; i=i+1) begin
            StochToBin16 stb_add4(
                .clk                (clk),
                .reset              (reset),
                .enable             (1'b1),
                .bit_stream         (add4_res_stoch[i]),
                .bin_number         (add4_res_bin[i])
            );
        end
    endgenerate
    generate
        for (i=0; i<NUM_ADDS_5; i=i+1) begin
            StochToBin16 stb_add5(
                .clk                (clk),
                .reset              (reset),
                .enable             (1'b1),
                .bit_stream         (add5_res_stoch[i]),
                .bin_number         (add5_res_bin[i])
            );
        end
    endgenerate
    generate
        for (i=0; i<NUM_ADDS_6; i=i+1) begin
            StochToBin16 stb_add6(
                .clk                (clk),
                .reset              (reset),
                .enable             (1'b1),
                .bit_stream         (add6_res_stoch[i]),
                .bin_number         (add6_res_bin[i])
            );
        end
    endgenerate
    generate
        for (i=0; i<NUM_ADDS_7; i=i+1) begin
            StochToBin16 stb_add7(
                .clk                (clk),
                .reset              (reset),
                .enable             (1'b1),
                .bit_stream         (add7_res_stoch[i]),
                .bin_number         (add7_res_bin[i])
            );
        end
    endgenerate


    /////////////////////// VIO and ILA ///////////////////////
    vio_1 vio(
        .clk                    (clk),
        .probe_out0             (reset),
        .probe_out1             (digit_sel)
    );
    ila_1 ila(
        .clk                     (clk),
        .probe0                  (reset),
        .probe1                  (done),
        .probe2                  (macc_out_bin),
        .probe3                  (bias_out_bin),
        // Add_1
        .probe4                  (mul_res_bin[0]),
        .probe5                  (mul_res_bin[1]),
        .probe6                  (mul_res_bin[2]),
        .probe7                  (mul_res_bin[3]),
        .probe8                  (mul_res_bin[4]),
        .probe9                  (mul_res_bin[5]),
        .probe10                 (mul_res_bin[6]),
        .probe11                 (mul_res_bin[7]),
        .probe12                 (mul_res_bin[8]),
        .probe13                 (mul_res_bin[9]),
        .probe14                 (mul_res_bin[10]),
        .probe15                 (mul_res_bin[11]),
        .probe16                 (mul_res_bin[12]),
        .probe17                 (mul_res_bin[13]),
        .probe18                 (mul_res_bin[14]),
        .probe19                 (mul_res_bin[15]),
        .probe20                 (mul_res_bin[16]),
        .probe21                 (mul_res_bin[17]),
        .probe22                 (mul_res_bin[18]),
        .probe23                 (mul_res_bin[19]),
        .probe24                 (mul_res_bin[20]),
        .probe25                 (mul_res_bin[21]),
        .probe26                 (mul_res_bin[22]),
        .probe27                 (mul_res_bin[23]),
        .probe28                 (mul_res_bin[24]),
        .probe29                 (mul_res_bin[25]),
        .probe30                 (mul_res_bin[26]),
        .probe31                 (mul_res_bin[27]),
        .probe32                 (mul_res_bin[28]),
        .probe33                 (mul_res_bin[29]),
        .probe34                 (mul_res_bin[30]),
        .probe35                 (mul_res_bin[31]),
        .probe36                 (mul_res_bin[32]),
        .probe37                 (mul_res_bin[33]),
        .probe38                 (mul_res_bin[34]),
        .probe39                 (mul_res_bin[35]),
        .probe40                 (mul_res_bin[36]),
        .probe41                 (mul_res_bin[37]),
        .probe42                 (mul_res_bin[38]),
        .probe43                 (mul_res_bin[39]),
        .probe44                 (mul_res_bin[40]),
        .probe45                 (mul_res_bin[41]),
        .probe46                 (mul_res_bin[42]),
        .probe47                 (mul_res_bin[43]),
        .probe48                 (mul_res_bin[44]),
        .probe49                 (mul_res_bin[45]),
        .probe50                 (mul_res_bin[46]),
        .probe51                 (mul_res_bin[47]),
        .probe52                 (mul_res_bin[48]),
        .probe53                 (mul_res_bin[49]),
        .probe54                 (mul_res_bin[50]),
        .probe55                 (mul_res_bin[51]),
        .probe56                 (mul_res_bin[52]),
        .probe57                 (mul_res_bin[53]),
        .probe58                 (mul_res_bin[54]),
        .probe59                 (mul_res_bin[55]),
        .probe60                 (mul_res_bin[56]),
        .probe61                 (mul_res_bin[57]),
        .probe62                 (mul_res_bin[58]),
        .probe63                 (mul_res_bin[59]),
        .probe64                 (mul_res_bin[60]),
        .probe65                 (mul_res_bin[61]),
        .probe66                 (mul_res_bin[62]),
        .probe67                 (mul_res_bin[63]),
        .probe68                 (mul_res_bin[64]),
        .probe69                 (mul_res_bin[65]),
        .probe70                 (mul_res_bin[66]),
        .probe71                 (mul_res_bin[67]),
        .probe72                 (mul_res_bin[68]),
        .probe73                 (mul_res_bin[69]),
        .probe74                 (mul_res_bin[70]),
        .probe75                 (mul_res_bin[71]),
        .probe76                 (mul_res_bin[72]),
        .probe77                 (mul_res_bin[73]),
        .probe78                 (mul_res_bin[74]),
        .probe79                 (mul_res_bin[75]),
        .probe80                 (mul_res_bin[76]),
        .probe81                 (mul_res_bin[77]),
        .probe82                 (mul_res_bin[78]),
        .probe83                 (mul_res_bin[79]),
        .probe84                 (mul_res_bin[80]),
        .probe85                 (mul_res_bin[81]),
        .probe86                 (mul_res_bin[82]),
        .probe87                 (mul_res_bin[83]),
        .probe88                 (mul_res_bin[84]),
        .probe89                 (mul_res_bin[85]),
        .probe90                 (mul_res_bin[86]),
        .probe91                 (mul_res_bin[87]),
        .probe92                 (mul_res_bin[88]),
        .probe93                 (mul_res_bin[89]),
        .probe94                 (mul_res_bin[90]),
        .probe95                 (mul_res_bin[91]),
        .probe96                 (mul_res_bin[92]),
        .probe97                 (mul_res_bin[93]),
        .probe98                 (mul_res_bin[94]),
        .probe99                 (mul_res_bin[95]),
        .probe100                 (mul_res_bin[96]),
        .probe101                 (mul_res_bin[97]),
        // Add_2
        .probe102                 (mul_res_bin[98]),
        .probe103                 (mul_res_bin[99]),
        .probe104                 (mul_res_bin[100]),
        .probe105                 (mul_res_bin[101]),
        .probe106                 (mul_res_bin[102]),
        .probe107                 (mul_res_bin[103]),
        .probe108                 (mul_res_bin[104]),
        .probe109                 (mul_res_bin[105]),
        .probe110                 (mul_res_bin[106]),
        .probe111                 (mul_res_bin[107]),
        .probe112                 (mul_res_bin[108]),
        .probe113                 (mul_res_bin[109]),
        .probe114                 (mul_res_bin[110]),
        .probe115                 (mul_res_bin[111]),
        .probe116                 (mul_res_bin[112]),
        .probe117                 (mul_res_bin[113]),
        .probe118                 (mul_res_bin[114]),
        .probe119                 (mul_res_bin[115]),
        .probe120                 (mul_res_bin[116]),
        .probe121                 (mul_res_bin[117]),
        .probe122                 (mul_res_bin[118]),
        .probe123                 (mul_res_bin[119]),
        .probe124                 (mul_res_bin[120]),
        .probe125                 (mul_res_bin[121]),
        .probe126                 (mul_res_bin[122]),
        .probe127                 (mul_res_bin[123]),
        .probe128                 (mul_res_bin[124]),
        .probe129                 (mul_res_bin[125]),
        .probe130                 (mul_res_bin[126]),
        .probe131                 (mul_res_bin[127]),
        .probe132                 (mul_res_bin[128]),
        .probe133                 (mul_res_bin[129]),
        .probe134                 (mul_res_bin[130]),
        .probe135                 (mul_res_bin[131]),
        .probe136                 (mul_res_bin[132]),
        .probe137                 (mul_res_bin[133]),
        .probe138                 (mul_res_bin[134]),
        .probe139                 (mul_res_bin[135]),
        .probe140                 (mul_res_bin[136]),
        .probe141                 (mul_res_bin[137]),
        .probe142                 (mul_res_bin[138]),
        .probe143                 (mul_res_bin[139]),
        .probe144                 (mul_res_bin[140]),
        .probe145                 (mul_res_bin[141]),
        .probe146                 (mul_res_bin[142]),
        .probe147                 (mul_res_bin[143]),
        .probe148                 (mul_res_bin[144]),
        .probe149                 (mul_res_bin[145]),
        .probe150                 (mul_res_bin[146]),
        // Add_3
        .probe151                 (mul_res_bin[147]),
        .probe152                 (mul_res_bin[148]),
        .probe153                 (mul_res_bin[149]),
        .probe154                 (mul_res_bin[150]),
        .probe155                 (mul_res_bin[151]),
        .probe156                 (mul_res_bin[152]),
        .probe157                 (mul_res_bin[153]),
        .probe158                 (mul_res_bin[154]),
        .probe159                 (mul_res_bin[155]),
        .probe160                 (mul_res_bin[156]),
        .probe161                 (mul_res_bin[157]),
        .probe162                 (mul_res_bin[158]),
        .probe163                 (mul_res_bin[159]),
        .probe164                 (mul_res_bin[160]),
        .probe165                 (mul_res_bin[161]),
        .probe166                 (mul_res_bin[162]),
        .probe167                 (mul_res_bin[163]),
        .probe168                 (mul_res_bin[164]),
        .probe169                 (mul_res_bin[165]),
        .probe170                 (mul_res_bin[166]),
        .probe171                 (mul_res_bin[167]),
        .probe172                 (mul_res_bin[168]),
        .probe173                 (mul_res_bin[169]),
        .probe174                 (mul_res_bin[170]),
        // Add_4
        .probe175                 (mul_res_bin[171]),
        .probe176                 (mul_res_bin[172]),
        .probe177                 (mul_res_bin[173]),
        .probe178                 (mul_res_bin[174]),
        .probe179                 (mul_res_bin[175]),
        .probe180                 (mul_res_bin[176]),
        .probe181                 (mul_res_bin[177]),
        .probe182                 (mul_res_bin[178]),
        .probe183                 (mul_res_bin[179]),
        .probe184                 (mul_res_bin[180]),
        .probe185                 (mul_res_bin[181]),
        .probe186                 (mul_res_bin[182]),
        // Add_5
        .probe187                 (mul_res_bin[183]),
        .probe188                 (mul_res_bin[184]),
        .probe189                 (mul_res_bin[185]),
        .probe190                 (mul_res_bin[186]),
        .probe191                 (mul_res_bin[187]),
        .probe192                 (mul_res_bin[188]),
        // Add_6
        .probe193                 (mul_res_bin[189]),
        .probe194                 (mul_res_bin[190]),
        .probe195                 (mul_res_bin[191]),
        // Add_7
        .probe196                 (mul_res_bin[192]),
        .probe197                 (mul_res_bin[193])
    );



endmodule
