import matplotlib.pyplot as plt
import numpy as np
import pandas as pd


## Paths
Windows_path_old = "C:\\Users\\Rory\Documents\\HDL\Stochastic_NN\\Outputs\\"
Windows_path_new = "C:\\Users\\Rory\\Documents\\HDL\\Stochastic_NN\\Linux_outputs_stoch\\"
Linux_path = "/user/masters/KilbyR/Project/Stochastic_NN_linux/Linux_outputs_stoch/"

## Files
#file1 = Linux_path + "L2_regen_digit3_test2.csv"
file1 = Linux_path + "L2_regen_digit0_upscaled_test2.csv"

############### Read ILA data fom CSV ################
df1 = pd.read_csv(file1)

# Delete row 2 and rewrite to file
if "UNSIGNED" in df1.iloc[0].values:
    df2 = df1.drop(index=0).reset_index(drop=True)
    df2.to_csv(file1, index=False)
######### 

df = pd.read_csv(file1)

# Set start and end range
row_index_done = (df[df['done'] == 1].index)
data = df.iloc[row_index_done, 5:]

## ILA results - Neuron196 input digit=8
L2_neur_out_ila_int16 = data.loc[:, "L2_neur_out_bin[0][15:0]":"L2_neur_out_bin[31][15:0]"]
L2_macc_out_ila_int16 = data.loc[:, "L2_macc_out_bin[0][15:0]":"L2_macc_out_bin[31][15:0]"]

L2_neur_out_ila_int16 = L2_neur_out_ila_int16.values.tolist()[0]
L2_macc_out_ila_int16 = L2_macc_out_ila_int16.values.tolist()[0]



## Python outputs
L2_macc_out_pyt_float_digit8 = [-0.00023674964904785156, -0.005519866943359375, -0.003680706024169922, -0.0007140636444091797, 0.0034401416778564453, 0.004800558090209961, 0.009500741958618164, 0.0033600330352783203, 0.010937690734863281, -0.013616561889648438, 0.0029265880584716797, 0.0019512176513671875, -0.0009810924530029297, 0.0035860538482666016, 0.012040853500366211, 0.0058634281158447266, 0.003695249557495117, -0.007080078125, -0.0031311511993408203, 0.00551915168762207, 0.0005753040313720703, 0.0053217411041259766, 0.0034525394439697266, -0.008504152297973633, 0.003789663314819336, 0.0012803077697753906, 0.012462615966796875, -0.0013015270233154297, -0.0019092559814453125, -0.00014352798461914062, 0.004645109176635742, -0.0011851787567138672]
L2_neur_out_pyt_float_digit8 = [4.947185516357422e-05, 0, 0, 0, 0.0019184350967407227, 0.0025833845138549805, 0.004719853401184082, 0.0016952753067016602, 0.005514621734619141, 0, 0.0013564825057983398, 0.0011587142944335938, 0, 0.0020524263381958008, 0.0064629316329956055, 0.0034962892532348633, 0.0017713308334350586, 0, 0, 0.002988457679748535, 0.0005317926406860352, 0.0028287172317504883, 0.0019246339797973633, 0, 0.001986384391784668, 0.0010368824005126953, 0.0059413909912109375, 0, 0, 0, 0.002078413963317871, 0]

L2_macc_out_pyt_float_digit0 = [0.00603485107421875, 9.298324584960938e-06, 0.00013208389282226562, -0.003160715103149414, -0.0009894371032714844, 0.009109258651733398, 0.004942655563354492, -0.0016150474548339844, 0.0059244632720947266, 0.004597663879394531, 0.0040323734283447266, 0.008733510971069336, 3.504753112792969e-05, 0.00027441978454589844, -0.0002493858337402344, 0.004887580871582031, 0.0021965503692626953, 0.006417989730834961, -0.0025482177734375, 0.0029103755950927734, -0.0029702186584472656, -0.00391840934753418, 0.004370212554931641, -0.011256694793701172, 0.001825571060180664, 0.012937784194946289, 0.008490324020385742, 0.005811929702758789, -0.0029227733612060547, -0.0069158077239990234, 0.0065691471099853516, 0.011761188507080078]
L2_neur_out_pyt_float_digit0 = [0.003185272216796875, 1.990795135498047e-05, 6.604194641113281e-05, 0, 0, 0.004737734794616699, 0.002440810203552246, 0, 0.0030080080032348633, 0.0025887489318847656, 0.0019093751907348633, 0.004549860954284668, 7.855892181396484e-05, 0.0003966093063354492, 0.0003178119659423828, 0.0030083656311035156, 0.0010219812393188477, 0.0035141706466674805, 0, 0.0016840696334838867, 0, 0, 0.0023834705352783203, 0, 0.001004338264465332, 0.0068656206130981445, 0.003955245018005371, 0.0027991533279418945, 0, 0, 0.0030404329299926758, 0.005956888198852539]

L2_macc_out_pyt_float_digit1 = [-0.007163286209106445, 0.0011034011840820312, 0.0020647048950195312, 0.0008380413055419922, 0.0018951892852783203, 0.0018649101257324219, 0.0036101341247558594, 0.002300739288330078, 0.003934144973754883, -0.001348733901977539, -0.0006563663482666016, 0.0008492469787597656, 0.0055866241455078125, 0.002450704574584961, 0.00566864013671875, 0.004965066909790039, 0.0014870166778564453, -0.0026459693908691406, 0.003629446029663086, 0.002520322799682617, 0.0003132820129394531, 0.004390239715576172, -0.0005993843078613281, 0.003798246383666992, -0.0011563301086425781, -0.0003819465637207031, -0.0014646053314208984, 0.0005300045013427734, 0.0011107921600341797, 0.003400087356567383, 0.0006966590881347656, -0.004277229309082031]
L2_neur_out_pyt_float_digit1 = [0, 0.0005669593811035156, 0.0010323524475097656, 0.0005563497543334961, 0.0011459589004516602, 0.001115560531616211, 0.0017745494842529297, 0.001165628433227539, 0.0020128488540649414, 0, 0, 0.0006077289581298828, 0.0028543472290039062, 0.0014847517013549805, 0.003276824951171875, 0.0030471086502075195, 0.0006672143936157227, 0, 0.001738429069519043, 0.0014890432357788086, 0.00040078163146972656, 0.002362966537475586, 0, 0.002204298973083496, 0, 0.00020575523376464844, 0, 0.00015819072723388672, 0.0012420415878295898, 0.0016390085220336914, 0.00010418891906738281, 0]

L2_macc_out_pyt_float_digit2 = [0.001967906951904297, -0.0009796619415283203, -0.0023322105407714844, -0.0064239501953125, 0.0031037330627441406, 0.011033296585083008, -0.0008120536804199219, -0.0024709701538085938, 0.00745844841003418, -0.0006582736968994141, 0.014972209930419922, 0.010885953903198242, 0.001195669174194336, 0.01141047477722168, -0.004916667938232422, 0.00451207160949707, 0.013268232345581055, 0.0009388923645019531, -0.0031473636627197266, 0.0012507438659667969, 0.0005769729614257812, 0.0067653656005859375, -0.00652623176574707, 0.008810043334960938, 0.012042760848999023, 0.0029706954956054688, 0.0076830387115478516, 0.0032355785369873047, -0.0075953006744384766, 0.004219770431518555, 0.006975412368774414, 0.008215904235839844]
L2_neur_out_pyt_float_digit2 = [0.0011518001556396484, 0, 0, 0, 0.0017502307891845703, 0.005699753761291504, 0, 0, 0.00377500057220459, 0, 0.007379293441772461, 0.005626082420349121, 0.000658869743347168, 0.00596463680267334, 0, 0.002820611000061035, 0.006557822227478027, 0.0007746219635009766, 0, 0.0008542537689208984, 0.0005326271057128906, 0.0035505294799804688, 0, 0.004710197448730469, 0.006112933158874512, 0.0018820762634277344, 0.0035516023635864258, 0.0015109777450561523, 0, 0.0020488500595092773, 0.003243565559387207, 0.004184246063232422]

L2_macc_out_pyt_float_digit3 = [0.0044727325439453125, 0.008516073226928711, -0.000301361083984375, 0.0014069080352783203, 0.0025501251220703125, 0.007850408554077148, 0.011143684387207031, 0.0007443428039550781, 0.008532285690307617, -0.005589723587036133, 0.0070037841796875, 0.011734247207641602, 0.00015807151794433594, 0.01342463493347168, 0.0039014816284179688, 0.00788736343383789, 0.008765935897827148, -0.0015056133270263672, -0.006634235382080078, 0.004763603210449219, 0.0022110939025878906, 0.002895832061767578, -0.0012917518615722656, -0.006863832473754883, 0.0028328895568847656, 0.005972862243652344, 0.014490604400634766, -0.0017108917236328125, -0.0024466514587402344, -0.004336357116699219, 0.006726264953613281, 0.003445148468017578]
L2_neur_out_pyt_float_digit3 = [0.0024042129516601562, 0.0042732954025268555, 0, 0.0008407831192016602, 0.0014734268188476562, 0.004108309745788574, 0.005541324615478516, 0.00038743019104003906, 0.004311919212341309, 0, 0.00339508056640625, 0.006050229072570801, 0.00014007091522216797, 0.00697171688079834, 0.0023932456970214844, 0.004508256912231445, 0.004306674003601074, 0, 0, 0.0026106834411621094, 0.0013496875762939453, 0.001615762710571289, 0, 0, 0.0015079975128173828, 0.003383159637451172, 0.006955385208129883, 0, 0, 0, 0.0031189918518066406, 0.001798868179321289]

## Python outputs upscaled by 128
L2_regen_out_pyt_float_digit8 = [0.0063323974609375, 0, 0, 0, 0.2455596923828125, 0.3306732177734375, 0.6041412353515625, 0.2169952392578125, 0.70587158203125, 0, 0.1736297607421875, 0.1483154296875, 0, 0.2627105712890625, 0.8272552490234375, 0.4475250244140625, 0.2267303466796875, 0, 0, 0.3825225830078125, 0.0680694580078125, 0.3620758056640625, 0.2463531494140625, 0, 0.2542572021484375, 0.132720947265625, 0.760498046875, 0, 0, 0, 0.2660369873046875, 0]
L2_regen_out_pyt_float_digit0 = [0.40771484375, 0.0025482177734375, 0.008453369140625, 0, 0, 0.6064300537109375, 0.3124237060546875, 0, 0.3850250244140625, 0.33135986328125, 0.2444000244140625, 0.5823822021484375, 0.0100555419921875, 0.0507659912109375, 0.040679931640625, 0.38507080078125, 0.1308135986328125, 0.4498138427734375, 0, 0.2155609130859375, 0, 0, 0.305084228515625, 0, 0.1285552978515625, 0.8787994384765625, 0.5062713623046875, 0.3582916259765625, 0, 0, 0.3891754150390625, 0.762481689453125]
L2_regen_out_pyt_float_digit1 = [0, 0.07257080078125, 0.13214111328125, 0.0712127685546875, 0.1466827392578125, 0.142791748046875, 0.227142333984375, 0.149200439453125, 0.2576446533203125, 0, 0, 0.077789306640625, 0.3653564453125, 0.1900482177734375, 0.41943359375, 0.3900299072265625, 0.0854034423828125, 0, 0.2225189208984375, 0.1905975341796875, 0.051300048828125, 0.302459716796875, 0, 0.2821502685546875, 0, 0.026336669921875, 0, 0.0202484130859375, 0.1589813232421875, 0.2097930908203125, 0.013336181640625, 0]
L2_regen_out_pyt_float_digit2 = [0.147430419921875, 0, 0, 0, 0.224029541015625, 0.7295684814453125, 0, 0, 0.4832000732421875, 0, 0.944549560546875, 0.7201385498046875, 0.0843353271484375, 0.7634735107421875, 0, 0.3610382080078125, 0.8394012451171875, 0.099151611328125, 0, 0.109344482421875, 0.06817626953125, 0.4544677734375, 0, 0.6029052734375, 0.7824554443359375, 0.24090576171875, 0.4546051025390625, 0.1934051513671875, 0, 0.2622528076171875, 0.4151763916015625, 0.53558349609375]
L2_regen_out_pyt_float_digit3 = [0.3077392578125, 0.5469818115234375, 0, 0.1076202392578125, 0.1885986328125, 0.5258636474609375, 0.70928955078125, 0.049591064453125, 0.5519256591796875, 0, 0.4345703125, 0.7744293212890625, 0.0179290771484375, 0.8923797607421875, 0.30633544921875, 0.577056884765625, 0.5512542724609375, 0, 0, 0.33416748046875, 0.172760009765625, 0.206817626953125, 0, 0, 0.193023681640625, 0.43304443359375, 0.890289306640625, 0, 0, 0, 0.39923095703125, 0.230255126953125]


####### Set digit #######
L2_macc_out_pyt_float = L2_macc_out_pyt_float_digit0
L2_neur_out_pyt_float = L2_regen_out_pyt_float_digit0


############ Plot Results #################
def bipolar_to_prob(y):
    return (y+1)/2

def bipolar_to_prob_int(y):
    return int(bipolar_to_prob(y)*256)

def prob_to_bipolar(x):
    return (2*x)-1

def prob_int_to_bipolar(x):
    return prob_to_bipolar(x/256)

def prob_int16_to_bipolar(x):
    return prob_to_bipolar(x/65536)



# Convert ILA values to floats
L2_neur_out_ila_float = [prob_int16_to_bipolar(x) for x in L2_neur_out_ila_int16]
L2_macc_out_ila_float = [prob_int16_to_bipolar(x) for x in L2_macc_out_ila_int16]


####### Plot and compare outputs ########
plt.figure(1)
## Macc out
assert(len(L2_macc_out_pyt_float) == len(L2_macc_out_ila_float))
x_values = [i for i in range(len(L2_macc_out_pyt_float))]

plt.title("MAC L2 output")
plt.bar(x_values, L2_macc_out_pyt_float, alpha=0.5, label="python values")
plt.scatter(x_values, L2_macc_out_ila_float, label="vivado values")
plt.legend()
plt.grid()

plt.figure(2)
## Neur out
assert(len(L2_neur_out_pyt_float) == len(L2_neur_out_ila_float))
x_values = [i for i in range(len(L2_neur_out_pyt_float))]

plt.title("Layer2 neuron outputs upscaled")
plt.bar(x_values, L2_neur_out_pyt_float, alpha=0.5, label="python values")
plt.scatter(x_values, L2_neur_out_ila_float, label="vivado values")
plt.legend()
plt.grid()


plt.show()