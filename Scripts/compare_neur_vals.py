"""
For verifying the ouputs of the synthesised and implemented stochastic moudles in Vrilog
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

def bipolar_to_prob(y):
    return (y+1)/2

def bipolar_to_prob_int(y):
    return int(bipolar_to_prob(y)*256)

def bipolar_to_prob_int16(y):
    return int(bipolar_to_prob(y)*65536)

def prob_to_bipolar(x):
    return (2*x)-1

def prob_int_to_bipolar(x):
    return prob_to_bipolar(x/256)

def prob_int16_to_bipolar(x):
    return prob_to_bipolar(x/65536)

def prob_int12_to_bipolar(x):
    return prob_to_bipolar(x/4096)

def prob_int16_to_unipolar(x):
    return x/65536



# Python output using scaled add, ReLU function
L2_bias_out_pyt_float = [4.947185516357422e-05, -0.0027446746826171875, -0.001840353012084961, -0.00021970272064208984, 0.0019184350967407227, 0.0025833845138549805, 0.004719853401184082, 0.0016952753067016602, 0.005514621734619141, -0.006518363952636719, 0.0013564825057983398, 0.0011587142944335938, -0.00042951107025146484, 0.0020524263381958008, 0.0064629316329956055, 0.0034962892532348633, 0.0017713308334350586, -0.00323486328125, -0.0016418695449829102, 0.002988457679748535, 0.0005317926406860352, 0.0028287172317504883, 0.0019246339797973633, -0.003946900367736816, 0.001986384391784668, 0.0010368824005126953, 0.0059413909912109375, -0.0007575750350952148, -0.00026798248291015625, -0.0001327991485595703, 0.002078413963317871, -0.0005162954330444336]
L2_macc_out_pyt_float = [-0.00023674964904785156, -0.005519866943359375, -0.003680706024169922, -0.0007140636444091797, 0.0034401416778564453, 0.004800558090209961, 0.009500741958618164, 0.0033600330352783203, 0.010937690734863281, -0.013616561889648438, 0.0029265880584716797, 0.0019512176513671875, -0.0009810924530029297, 0.0035860538482666016, 0.012040853500366211, 0.0058634281158447266, 0.003695249557495117, -0.007080078125, -0.0031311511993408203, 0.00551915168762207, 0.0005753040313720703, 0.0053217411041259766, 0.0034525394439697266, -0.008504152297973633, 0.003789663314819336, 0.0012803077697753906, 0.012462615966796875, -0.0013015270233154297, -0.0019092559814453125, -0.00014352798461914062, 0.004645109176635742, -0.0011851787567138672]
L2_relu_out_pyt_float = [4.947185516357422e-05, 0, 0, 0, 0.0019184350967407227, 0.0025833845138549805, 0.004719853401184082, 0.0016952753067016602, 0.005514621734619141, 0, 0.0013564825057983398, 0.0011587142944335938, 0, 0.0020524263381958008, 0.0064629316329956055, 0.0034962892532348633, 0.0017713308334350586, 0, 0, 0.002988457679748535, 0.0005317926406860352, 0.0028287172317504883, 0.0019246339797973633, 0, 0.001986384391784668, 0.0010368824005126953, 0.0059413909912109375, 0, 0, 0, 0.002078413963317871, 0]

# Vivado chipscope macc outputs, scaled by 256
L2_N0_macc_out_int16 = 32978
L2_N0_bias_out_int16 = 16481

# Vivado simulation with bitstr_len = 65536
L2_relu_out_viv_int16 = [    0,     0,     0,     0, 32830, 32832, 32915, 32821, 32928,     0, 32793, 32814,     0, 32819, 32940, 32852, 32817,     0,     0, 32862, 32777, 32850, 32820,     0, 32842, 32803, 32940,     0,     0, 32778, 32807,     0]
L2_bias_out_viv_int16 = [32758, 32661, 32695, 32729, 32830, 32832, 32915, 32821, 32928, 32541, 32793, 32814, 32728, 32819, 32940, 32852, 32817, 32638, 32721, 32862, 32777, 32850, 32820, 32620, 32842, 32803, 32940, 32737, 32762, 32778, 32807, 32732]
L2_macc_out_viv_int16 = [32749, 32595, 32637, 32743, 32877, 32913, 33075, 32849, 33111, 32329, 32873, 32837, 32727, 32905, 33145, 32943, 32905, 32557, 32657, 32947, 32763, 32957, 32871, 32491, 32897, 32825, 33159, 32723, 32687, 32777, 32913, 32735]

# Compare
#print( prob_int16_to_bipolar(L2_N0_macc_out_int16) )
#print( prob_int16_to_bipolar(L2_N0_bias_out_int16) )

# Compare simulation vals vs python
L2_relu_out_viv_float = [prob_int16_to_bipolar(x) for x in L2_relu_out_viv_int16]
L2_bias_out_viv_float = [prob_int16_to_bipolar(x) for x in L2_bias_out_viv_int16]
L2_macc_out_viv_float = [prob_int16_to_bipolar(x) for x in L2_macc_out_viv_int16]

"""
plt.figure(1)
plt.title("L2 Bias_out comparison")
x_vals = [i for i in range(32)]
plt.bar(x_vals, L2_bias_out_pyt_float, label="Python vals"),
plt.scatter(x_vals, L2_bias_out_viv_float, label="Vivado vals")
plt.grid()
plt.legend()

plt.figure(2)
plt.title("L2 Macc_out comparison")
x_vals = [i for i in range(32)]
plt.bar(x_vals, L2_macc_out_pyt_float, label="Python vals"),
plt.scatter(x_vals, L2_macc_out_viv_float, label="Vivado vals")
plt.grid()
plt.legend()

plt.show()
"""

## Testing new values
L2_relu_out_viv_int16_fixed = [32768, 32768, 32768, 32768, 32830, 32832, 32915, 32821, 32928, 32768, 32793, 32814, 32768, 32819, 32940, 32852, 32817, 32768, 32768, 32862, 32777, 32850, 32820, 32768, 32842, 32803, 32940, 32768, 32768, 32778, 32807, 32768]

## Verified eight is exactly the same as float values when converted
L2_macc_out_pyt_int16_zero = [32965, 32768, 32772, 32664, 32735, 33066, 32929, 32715, 32962, 32918, 32900, 33054, 32769, 32776, 32759, 32928, 32839, 32978, 32684, 32863, 32670, 32639, 32911, 32399, 32827, 33191, 33046, 32958, 32672, 32541, 32983, 33153]
L2_macc_out_pyt_int16_one = [32533, 32804, 32835, 32795, 32830, 32829, 32886, 32843, 32896, 32723, 32746, 32795, 32951, 32848, 32953, 32930, 32816, 32681, 32886, 32850, 32778, 32911, 32748, 32892, 32730, 32755, 32720, 32785, 32804, 32879, 32790, 32627]
L2_macc_out_pyt_int16_two = [32832, 32735, 32691, 32557, 32869, 33129, 32741, 32687, 33012, 32746, 33258, 33124, 32807, 33141, 32606, 32915, 33202, 32798, 32664, 32808, 32786, 32989, 32554, 33056, 33162, 32865, 33019, 32874, 32519, 32906, 32996, 33037]
L2_macc_out_pyt_int16_three = [32914, 33047, 32758, 32814, 32851, 33025, 33133, 32792, 33047, 32584, 32997, 33152, 32773, 33207, 32895, 33026, 33055, 32718, 32550, 32924, 32840, 32862, 32725, 32543, 32860, 32963, 33242, 32711, 32687, 32625, 32988, 32880]
L2_macc_out_pyt_int16_four = [32702, 32602, 32615, 32842, 32826, 32869, 32783, 32573, 32866, 32771, 32705, 32945, 32758, 33081, 32487, 32873, 32784, 32779, 32735, 32866, 32860, 32664, 32677, 32738, 32565, 32768, 32782, 32676, 32793, 32776, 32817, 32987]
L2_macc_out_pyt_int16_five = [32880, 32846, 32918, 32787, 32579, 32886, 32951, 32856, 33081, 32739, 32828, 32919, 32627, 32886, 33009, 32936, 32938, 32805, 32515, 32910, 32769, 32586, 32911, 32636, 32899, 33014, 32942, 32888, 32827, 32743, 32758, 32824]
L2_macc_out_pyt_int16_six = [32620, 32806, 32991, 32869, 32685, 32942, 32891, 32818, 33086, 32542, 32756, 33175, 32842, 32888, 32767, 33014, 32795, 32694, 32967, 32900, 32754, 32697, 32839, 32765, 32696, 33126, 32793, 32784, 32716, 32858, 32795, 32913]
L2_macc_out_pyt_int16_seven = [32809, 32429, 32677, 32705, 32798, 32793, 32740, 32938, 32861, 32813, 32791, 32772, 32762, 32799, 32883, 32928, 32819, 32639, 32818, 32862, 32711, 32885, 32803, 32928, 32715, 32756, 32770, 32829, 32809, 32884, 32727, 32634]
L2_macc_out_pyt_int16_eight = [32760, 32587, 32647, 32744, 32880, 32925, 33079, 32878, 33126, 32321, 32863, 32831, 32735, 32885, 33162, 32960, 32889, 32536, 32665, 32948, 32786, 32942, 32881, 32489, 32892, 32809, 33176, 32725, 32705, 32763, 32920, 32729]
L2_macc_out_pyt_int16_nine = [32784, 32713, 32733, 32770, 32904, 32905, 32891, 32948, 32874, 32767, 32881, 32944, 32768, 33022, 32933, 32952, 32829, 32739, 32888, 32895, 32740, 32808, 32825, 32930, 32783, 32831, 32911, 32716, 33010, 32720, 32865, 32681]


############### Read ILA data from impl Layer2 ################
file1 = "C:\\Users\\Rory\Documents\\HDL\Stochastic_NN\\Outputs\\iladata.csv"

df = pd.read_csv(file1, skiprows=1)

#df.info()

# Set start and end range
row_index_done = df[df['HEX.1'] == 1].index
data = df.iloc[row_index_done, 5:].values.tolist()[0]

L2_relu_out_ila_int16 = data[0:32]
L2_macc_out_ila_int16 = data[32:65]

## Compare ILA L2 values and expected results from python
L2_relu_out_ila_float = [prob_int16_to_bipolar(x) for x in L2_relu_out_ila_int16]
L2_macc_out_ila_float = [prob_int16_to_bipolar(x) for x in L2_macc_out_ila_int16]
# [33878, 33239, 38417, 37084, 37789, 36364, 34935, 36080, 36890, 34382, 39444, 31901, 30958, 33651, 34048, 32870, 36157, 34919, 40231, 26182, 35548, 35212, 32498, 24153, 33773, 38554, 38524, 44816, 34888, 35502, 36389, 33934]
L2_macc_out_pyt_float_eight = [prob_int16_to_bipolar(x) for x in L2_macc_out_pyt_int16_eight]

L2_macc_out_pyt_float_zero = [prob_int16_to_bipolar(x) for x in L2_macc_out_pyt_int16_zero]

print(L2_macc_out_ila_int16)

plt.figure(1)
plt.title("L2 Relu_out comparison")
x_vals = [i for i in range(32)]
plt.bar(x_vals, L2_relu_out_pyt_float, label="Python vals"),
plt.scatter(x_vals, L2_relu_out_ila_float, label="Vivado vals")
plt.grid()
plt.legend()

plt.figure(2)
plt.title("L2 Macc_out comparison")
x_vals = [i for i in range(32)]
plt.bar(x_vals, L2_macc_out_pyt_float_zero, label="Python vals"),
plt.scatter(x_vals, L2_macc_out_ila_float, label="Vivado vals")
plt.grid()
plt.legend()

plt.show()


