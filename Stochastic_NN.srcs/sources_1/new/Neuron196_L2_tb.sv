// Testbench for Neuron196_L2, generate stoch nums and convert outputs
// Inputs: Stochastic inputs, weights and bias
// Output: 8-bit binary result

(* keep_hierarchy = "yes" *)
(* DONT_TOUCH = "yes" *)
(* keep = "true" *)
module Neuron196_L2_tb(
    input clk,
    input reset,
    input [3:0] digit_sel,
    input [15:0] weights_bin     [0:195],
    input [15:0] bias_bin,

    output [15:0] result_bin,
    output [15:0] macc_result_bin,
    output [15:0] bias_out_bin,

    /////////// Debug wires /////////////
    output [15:0] add1_res_bin [0:97],
    output [15:0] add2_res_bin [0:48],
    output [15:0] add3_res_bin [0:23],
    output [15:0] add4_res_bin [0:11],
    output [15:0] add5_res_bin [0:5],
    output [15:0] add6_res_bin [0:2],
    output [15:0] add7_res_bin [0:1],

    output done
    );

    // Digit sel logic
    logic [15:0] test_data_zero [0:195] =   '{ 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 43520, 62208, 55296, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 33024, 43520, 64256, 62976, 59136, 46848, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 47360, 65280, 58624, 64256, 46080, 59904, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 40704, 64000, 56064, 35584, 37376, 32768, 64768, 39680, 32768, 32768, 32768, 32768, 32768, 34816, 62720, 44800, 34304, 32768, 32768, 32768, 65280, 45312, 32768, 32768, 32768, 32768, 32768, 49408, 58624, 32768, 32768, 32768, 32768, 32768, 65280, 43776, 32768, 32768, 32768, 32768, 32768, 54272, 48128, 32768, 32768, 32768, 33024, 49664, 56320, 33280, 32768, 32768, 32768, 32768, 32768, 54528, 44544, 32768, 32768, 36352, 55296, 51712, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 54272, 61696, 49408, 57344, 62464, 49408, 34560, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 40960, 61184, 65280, 54016, 37376, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768 };
    logic [15:0] test_data_one [0:195] =    '{ 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 35072, 39168, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 50688, 50944, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 50688, 52992, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 50176, 57600, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 44544, 58880, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 44544, 62464, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 39168, 65280, 33792, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 35328, 64512, 38912, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 57856, 33024, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 61440, 36864, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 45056, 33792, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768 };
    logic [15:0] test_data_two [0:195] =    '{ 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 35328, 47104, 49152, 49152, 41728, 35328, 33280, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 54528, 65280, 65280, 65280, 65280, 63232, 61952, 56576, 34560, 32768, 32768, 32768, 32768, 32768, 59648, 60928, 52992, 59648, 64000, 65280, 65280, 65280, 62720, 34816, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 36096, 40192, 49664, 62208, 65280, 43264, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 33280, 60160, 63488, 36352, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 36096, 53760, 65024, 48128, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 43776, 60160, 64768, 48640, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 50944, 64000, 61184, 42240, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 33024, 63744, 65280, 55552, 43776, 43264, 35072, 33024, 32768, 32768, 32768, 32768, 32768, 32768, 35328, 58368, 64512, 65280, 65280, 65280, 63488, 55296, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 37632, 41472, 49152, 44800, 35840, 36608, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768 };
    logic [15:0] test_data_three [0:195] =  '{ 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 34048, 37632, 49152, 48896, 48896, 38656, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 39936, 60672, 64256, 65280, 65024, 65024, 62208, 35072, 32768, 32768, 32768, 32768, 32768, 32768, 36352, 50688, 45056, 41216, 43520, 64256, 62464, 34816, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 44288, 64768, 54016, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 33792, 43008, 45056, 58624, 65024, 59904, 40448, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 49920, 65280, 65280, 65280, 65280, 48896, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 33792, 38400, 35584, 35584, 54016, 53760, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 35328, 33024, 32768, 32768, 35840, 59392, 53760, 32768, 32768, 32768, 32768, 32768, 32768, 41472, 62976, 42752, 41472, 44288, 59648, 62976, 45312, 32768, 32768, 32768, 32768, 32768, 32768, 40960, 61952, 65024, 65024, 62464, 54272, 37888, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 36352, 48384, 41472, 33536, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768 };
    logic [15:0] test_data_four [0:195] =   '{ 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 42752, 34048, 32768, 32768, 32768, 32768, 47104, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 54784, 35328, 32768, 32768, 32768, 32768, 58368, 32768, 32768, 32768, 32768, 32768, 32768, 39680, 59136, 32768, 32768, 32768, 32768, 38400, 60160, 32768, 32768, 32768, 32768, 32768, 32768, 47872, 52480, 32768, 32768, 32768, 32768, 43264, 55808, 32768, 32768, 32768, 32768, 33280, 41472, 63488, 43520, 32768, 32768, 32768, 32768, 43008, 60416, 46592, 49664, 55040, 57088, 56576, 47616, 65280, 34048, 32768, 32768, 32768, 32768, 32768, 42752, 44544, 44544, 37888, 32768, 32768, 41728, 61696, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 44032, 53504, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 44032, 56064, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 44032, 59904, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 35840, 46336, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768 };
    logic [15:0] test_data_five [0:195] =   '{ 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 45056, 57088, 65280, 65280, 59136, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 43008, 63232, 57088, 50944, 47104, 40960, 32768, 32768, 32768, 32768, 32768, 32768, 49152, 45056, 34816, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 43008, 63232, 36864, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 45056, 65280, 59136, 47104, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 36864, 47104, 63232, 43008, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 34816, 59136, 45056, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 49152, 57088, 49152, 59136, 63232, 36864, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 61184, 61184, 59136, 49152, 36864, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768 };
    logic [15:0] test_data_six [0:195] =    '{ 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 41728, 64256, 56832, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 43008, 65024, 54016, 60672, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 36608, 63232, 57600, 34560, 34048, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 54272, 63488, 37632, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 36864, 63744, 54784, 42240, 45312, 40192, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 46336, 65280, 60928, 62976, 58880, 64512, 39680, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 47360, 65280, 62464, 38912, 36352, 65280, 44544, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 47360, 62464, 43008, 33024, 53760, 63744, 35584, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 38912, 64512, 55808, 56320, 65280, 43520, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 41472, 57344, 57856, 48384, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768 };
    logic [15:0] test_data_seven [0:195] =  '{ 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 35328, 32768, 32768, 32768, 32768, 32768, 35840, 44544, 48384, 51456, 36864, 32768, 32768, 32768, 33024, 32768, 32768, 32768, 40192, 56064, 63232, 53760, 46336, 65280, 45568, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 41984, 48128, 36096, 35328, 60416, 56064, 33536, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 35328, 60416, 57344, 34048, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 35072, 59136, 56064, 34048, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 33792, 57856, 59136, 34048, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 50688, 57856, 34816, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 43008, 38656, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768 };
    logic [15:0] test_data_eight [0:195] =  '{ 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 34048, 43520, 46592, 40448, 33280, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 44544, 65280, 61184, 60416, 57600, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 47360, 62464, 33536, 38144, 64000, 50176, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 47360, 64768, 51712, 63488, 64256, 47104, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 48896, 65280, 65280, 51200, 33792, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 33792, 47616, 64256, 60160, 39680, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 34304, 57088, 65280, 62720, 53504, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 50688, 55808, 40704, 57856, 53504, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 35840, 64000, 43008, 38144, 65024, 46592, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 37888, 64512, 62464, 64256, 57344, 33280, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 41728, 49152, 46848, 34816, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768 };
    logic [15:0] test_data_nine [0:195] =   '{ 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 39168, 48896, 42496, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 37888, 53504, 60928, 52480, 65280, 39680, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 38656, 61696, 41472, 33024, 50176, 58624, 33024, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 47616, 46080, 32768, 37120, 62720, 49408, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 47872, 62976, 56320, 59392, 65280, 37120, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 39168, 40704, 51968, 52736, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 37120, 60928, 35072, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 35072, 59392, 46080, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 51712, 50432, 33024, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 40448, 62976, 34304, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 37888, 40448, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768 };
    logic [15:0] input_data_bin [0:195];

    // Combinational block to select digit
    always @(*) begin
        case (digit_sel)
            4'h0    :   input_data_bin = test_data_zero;
            4'h1    :   input_data_bin = test_data_one;
            4'h2    :   input_data_bin = test_data_two;
            4'h3    :   input_data_bin = test_data_three;
            4'h4    :   input_data_bin = test_data_four;
            4'h5    :   input_data_bin = test_data_five;
            4'h6    :   input_data_bin = test_data_six ;
            4'h7    :   input_data_bin = test_data_seven;
            4'h8    :   input_data_bin = test_data_eight;
            4'h9    :   input_data_bin = test_data_nine;
            default :   input_data_bin = test_data_zero;
        endcase
    end

    // Debug
    reg [15:0] LFSR1_seed = 16'd25645;
    reg [15:0] LFSR2_seed = 16'd57842;

    // Stochastic inputs
    wire inps_stoch       [0:NUM_INPS-1];
    wire weights_stoch    [0:NUM_INPS-1];
    wire bias_stoch;

    // Stochastic outputs
    wire neur_result_stoch;
    wire macc_out_stoch;
    wire bias_out_stoch;
    // Debug wires
    wire add1_res_stoch [0:97];
    wire add2_res_stoch [0:48];
    wire add3_res_stoch [0:23];
    wire add4_res_stoch [0:11];
    wire add5_res_stoch [0:5];
    wire add6_res_stoch [0:2];
    wire add7_res_stoch [0:1];

    // Consts
    localparam NUM_INPS = 196;
    localparam NUM_ADDS_1 = 98;
    localparam NUM_ADDS_2 = 49;
    localparam NUM_ADDS_3 = 24;
    localparam NUM_ADDS_4 = 12;
    localparam NUM_ADDS_5 = 6;
    localparam NUM_ADDS_6 = 3;
    localparam NUM_ADDS_7 = 2;


    // Generate stochastic inputs
    genvar i;
    generate
        for (i=0; i<NUM_INPS; i=i+1) begin
            StochNumGen16 SNG_inps(
                .clk            (clk),
                .reset          (reset),
                .seed           (LFSR1_seed),
                .prob           (input_data_bin[i]),
                .stoch_num      (inps_stoch[i])
            );
        end
    endgenerate

    // Generate stochastic weights
    generate
        for (i=0; i<NUM_INPS; i=i+1) begin
            StochNumGen16 SNG_weights(
                .clk            (clk),
                .reset          (reset),
                .seed           (LFSR2_seed),
                .prob           (weights_bin[i]),
                .stoch_num      (weights_stoch[i])
            );
        end
    endgenerate

    // Generate bias stoch num
    StochNumGen16 SNG_bias(
        .clk                (clk),
        .reset              (reset),
        .seed               (16'd37483),           // Changed from 8 to 16 bits
        .prob               (bias_bin),
        .stoch_num          (bias_stoch)
    );

    /////////////// SNGs for adder select lines //////////////////
    // Wire array for adder stages and bias, i.e. add1, add2, ... add8, add_bias
    wire add_sel_stoch [0:8];
    reg [15:0] adder_seeds [0:8] = '{49449, 65515, 49141, 34104, 65172, 23739, 62006, 39009, 47385};

    generate
        for (i=0; i<9; i=i+1) begin
            StochNumGen16 SNG_add_sel(
                .clk                (clk),
                .reset              (reset),
                .seed               (adder_seeds[i]),
                .prob               (16'h8000),     // 0.5
                .stoch_num          (add_sel_stoch[i])
            );
        end
    endgenerate
    //////////////////////////////////////////////////////////////

    // Neuron
    Neuron196_L2 neur_L2(
        .clk                (clk),
        .reset              (reset),
        .input_data         (inps_stoch),
        .weights            (weights_stoch),
        .bias               (bias_stoch),
        .add_sel            (add_sel_stoch),

        .macc_out           (macc_out_stoch),
        .add1_res_stoch     (add1_res_stoch),
        .add2_res_stoch     (add2_res_stoch),
        .add3_res_stoch     (add3_res_stoch),
        .add4_res_stoch     (add4_res_stoch),
        .add5_res_stoch     (add5_res_stoch),
        .add6_res_stoch     (add6_res_stoch),
        .add7_res_stoch     (add7_res_stoch),
        .bias_out           (bias_out_stoch),
        .result             (neur_result_stoch)
    );

    // STB output
    StochToBin16 STB_res(
        .clk                (clk),
        .reset              (reset),
        .enable             (1'b1),
        .bit_stream         (neur_result_stoch),
        .bin_number         (result_bin),
        .done               (done)
    );

    // STB for macc result
    StochToBin16 stb_macc(
        .clk                (clk),
        .reset              (reset),
        .enable             (1'b1),
        .bit_stream         (macc_out_stoch),
        .bin_number         (macc_result_bin)
    );

    //////// STBs for adder stages result /////////
    generate
        for (i=0; i<NUM_ADDS_1; i=i+1) begin
            StochToBin16 stb_add1(
                .clk                (clk),
                .reset              (reset),
                .enable             (1'b1),
                .bit_stream         (add1_res_stoch[i]),
                .bin_number         (add1_res_bin[i])
            );
        end
    endgenerate
    generate
        for (i=0; i<NUM_ADDS_2; i=i+1) begin
            StochToBin16 stb_add2(
                .clk                (clk),
                .reset              (reset),
                .enable             (1'b1),
                .bit_stream         (add2_res_stoch[i]),
                .bin_number         (add2_res_bin[i])
            );
        end
    endgenerate
    generate
        for (i=0; i<NUM_ADDS_3; i=i+1) begin
            StochToBin16 stb_add3(
                .clk                (clk),
                .reset              (reset),
                .enable             (1'b1),
                .bit_stream         (add3_res_stoch[i]),
                .bin_number         (add3_res_bin[i])
            );
        end
    endgenerate
    generate
        for (i=0; i<NUM_ADDS_4; i=i+1) begin
            StochToBin16 stb_add4(
                .clk                (clk),
                .reset              (reset),
                .enable             (1'b1),
                .bit_stream         (add4_res_stoch[i]),
                .bin_number         (add4_res_bin[i])
            );
        end
    endgenerate
    generate
        for (i=0; i<NUM_ADDS_5; i=i+1) begin
            StochToBin16 stb_add5(
                .clk                (clk),
                .reset              (reset),
                .enable             (1'b1),
                .bit_stream         (add5_res_stoch[i]),
                .bin_number         (add5_res_bin[i])
            );
        end
    endgenerate
    generate
        for (i=0; i<NUM_ADDS_6; i=i+1) begin
            StochToBin16 stb_add6(
                .clk                (clk),
                .reset              (reset),
                .enable             (1'b1),
                .bit_stream         (add6_res_stoch[i]),
                .bin_number         (add6_res_bin[i])
            );
        end
    endgenerate
    generate
        for (i=0; i<NUM_ADDS_7; i=i+1) begin
            StochToBin16 stb_add7(
                .clk                (clk),
                .reset              (reset),
                .enable             (1'b1),
                .bit_stream         (add7_res_stoch[i]),
                .bin_number         (add7_res_bin[i])
            );
        end
    endgenerate

    // STB bias result
    StochToBin16 stb_bias(
        .clk                (clk),
        .reset              (reset),
        .enable             (1'b1),
        .bit_stream         (bias_out_stoch),
        .bin_number         (bias_out_bin)
    );

endmodule
